//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3fa592be-eaea-4494-9b3f-be1cbbbc0977"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c6667191-1a8f-4c53-a628-ec234232cf2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5359760c-5e78-451f-8d17-2f9ca621cd81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""f152ae53-6315-477a-9ef8-96fab398fb9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AllowCameraMovement"",
                    ""type"": ""Button"",
                    ""id"": ""23522d48-a04c-41a6-afaa-538aa046501a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a114bd0e-247e-45b2-b638-fa752fb40b8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6bd2746a-2c76-4394-b4d3-924e83c10eca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4bb6b74b-347b-4128-99e9-be8f9124e2dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""63e7bf3e-4510-4188-b037-99f50498c68f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""219b9d6f-d681-4800-95b3-add5eef06254"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dc69ffc8-a657-406a-8e06-3a23acb99cca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""7dfb4f3a-1019-4c8b-9a93-ddc869bf08e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""54beb43f-d3c9-43d1-8f45-332888248a9f"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a9d9e432-e438-446d-bf44-0dcea52c6383"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3cc2781-dcfe-422b-ac61-965290b7e854"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f604800-6da5-40f7-84a4-cddd409c7bb7"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c32a7f67-5144-4d40-836d-d2571518803f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69b24343-039d-48e5-88e3-d98e0f3513e0"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e669ec6-ecd9-49f9-a1e6-2b34962ebbe8"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dda58ad9-16d4-4cb4-b11f-b60549acbc06"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""951f21f4-8aec-4960-889a-966394dcc135"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4534a6a-fa9a-4edd-8cd8-da4789ee1cf8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AllowCameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pause"",
            ""id"": ""6a5a6ca7-3bde-4ff0-b850-4c87fb908a62"",
            ""actions"": [
                {
                    ""name"": ""Unpause"",
                    ""type"": ""Button"",
                    ""id"": ""4ddab65e-39f3-4f46-ab4b-784079efd230"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a0c24241-fb5e-4d1e-af4b-a855f76f7154"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b759dc79-d7e2-4877-b83a-3858c2522dd9"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Unpause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""6ad8660a-8a33-4654-8768-79f81f54fef0"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""0fd5dead-5c97-4c9a-8f24-fa0dd33c2726"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""545e6474-0a19-4ac5-8872-205174cf5ae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c7cbfd53-a637-4a4c-9895-0243cd39799c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""f090832e-fc7f-4a0d-8f33-9140324183d0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e5ad963-e47a-4531-9862-72d0d36f62a0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""815bbc43-8366-432e-8dbd-eabfb08ec537"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d74113b5-f6be-46fc-a77a-0454f9d97d43"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab2823d9-8049-479f-8932-8a8413c95784"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2f8a6e-636d-415c-a644-1bad3c605c74"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fd6b644-32b0-4b5b-9ebe-57933a9fd0d7"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56368b20-0269-4a54-aafc-be1a6aec8a43"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""RotateObjects"",
                    ""id"": ""b2e5c4eb-17f2-4af4-9e66-ed19c8add108"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5fdefbf1-93e1-403b-b8dc-e2593e4e2b2d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7784f02b-f0dc-4aa0-97af-64eaff0566b6"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""1553c491-aa6d-41e7-8596-6d42e2fbbc4a"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""7dee7be6-6520-40b5-a9d7-60cfda8b4838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e47fee7-ef76-4eca-a8c2-f6b5b8760fa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""bfc9a33f-56f6-4ca8-a4c6-3f9b65eb81b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AnyKeyPressed"",
                    ""type"": ""Button"",
                    ""id"": ""6c2b4dad-7333-42f3-bf26-3c997d72564c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5030b964-b365-4a60-94b0-546e26b45acd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87b1d1b7-7d62-46fa-928f-842cd938131a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6dc1cca-2d87-48a5-aca3-32870cc30923"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b57a4665-499a-4c4f-bde4-3acdc3250d50"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26e25cde-6c7a-40f1-939b-0ca301080a18"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59851724-5934-4c91-a37d-8cc734a3b943"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa604c1a-887b-45db-a437-8338d720610d"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AnyKeyPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e98ac63d-3020-489a-ab46-3f0fe50773ed"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AnyKeyPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90ad4b06-57c9-4829-aa58-a3987796b7b5"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AnyKeyPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3faf262-4414-4d55-b68f-01302313ebdc"",
                    ""path"": ""<Mouse>/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AnyKeyPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d70d94e1-830b-445c-9a4d-09476e9b8247"",
                    ""path"": ""<Mouse>/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AnyKeyPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpreadPaste"",
            ""id"": ""4b057310-33a5-479a-98cf-ffc34e8b1b5f"",
            ""actions"": [
                {
                    ""name"": ""SpreadPasteAction"",
                    ""type"": ""Value"",
                    ""id"": ""df5fed86-1788-4a65-abda-556772ae2f65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46069e79-8268-4697-8bae-ac7e63c49d6d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SpreadPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65a74147-41bb-4dd5-b441-9d9061ca9704"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpreadPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72617cb1-b1cc-406b-82a3-1453b4b8654e"",
                    ""path"": ""<DualShockGamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpreadPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpreadPasteV2"",
            ""id"": ""e5b85c26-cb34-4ea4-8adb-cace98a48b23"",
            ""actions"": [
                {
                    ""name"": ""SpreadPasteFirstAction"",
                    ""type"": ""Button"",
                    ""id"": ""231b9b46-0d1f-4a98-9e47-55d0525dbd61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpreadPasteSecondAction"",
                    ""type"": ""Button"",
                    ""id"": ""e047aa21-a1fe-470a-ae81-f7e5837749d8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2179660d-064e-43c4-a606-f50ae589c902"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpreadPasteFirstAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8bbc25e8-d74b-45ea-a868-6da609ef7054"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SpreadPasteFirstAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""37c96b08-80ed-48a2-bbe5-88364046a92b"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpreadPasteSecondAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c35c859b-d3b4-4b6a-8734-2b7baea17d0e"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SpreadPasteSecondAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BurnTop"",
            ""id"": ""206dee9d-8672-4f18-98b1-d21df08131a6"",
            ""actions"": [
                {
                    ""name"": ""BurnTopAction"",
                    ""type"": ""Value"",
                    ""id"": ""ecdbdbb1-94b9-4a44-8f49-c573e3c26488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af292c55-c221-49e6-a1b0-af4a4371f0da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""BurnTopAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5345c42-9d59-476b-905e-c29aa6311dca"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BurnTopAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RollPaste"",
            ""id"": ""2a77045c-e556-4930-9476-39a991673936"",
            ""actions"": [
                {
                    ""name"": ""RollPasteAction"",
                    ""type"": ""Value"",
                    ""id"": ""1dac96ba-9f53-4391-a674-5a15567ba27e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Joystick"",
                    ""id"": ""bd012439-0e46-4e75-85bc-8de0967371a5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00aeeed8-cc4f-4028-9ff7-4a761d4c3fe2"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ebac584-eaf4-4666-b8b9-fc74fec939e6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""43883835-be7a-4f82-8bda-44700f9ed4e9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52ba4b39-b992-4ba3-9b56-902221eacdbe"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRightAction"",
                    ""id"": ""97288f26-074f-4aa5-8648-62c3aa5a7038"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b4b675df-e767-4410-a366-d22f2d32b565"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efc4f3e5-55e3-4ef8-a3e8-cdca0035876a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""64bc01f5-9afc-48b8-94c6-13b294de7af7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3894c0f2-1962-40c6-9e3c-a29dff58b805"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AddItems"",
            ""id"": ""9fd56c07-fbba-4744-8c34-1eb08047e60b"",
            ""actions"": [
                {
                    ""name"": ""AddItemsAction"",
                    ""type"": ""Button"",
                    ""id"": ""9e5da248-9d5e-4120-95df-c781a37b188a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e717c75d-fb18-48b1-adf0-35f43b5f4e74"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AddItemsAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53815827-1d00-471e-a47a-8d960c3d911a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AddItemsAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30162b73-45ea-4c77-b661-958cdea9910b"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AddItemsAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CutPaste"",
            ""id"": ""cce81d0d-6eef-49e5-ace7-b1067df4088b"",
            ""actions"": [
                {
                    ""name"": ""CutPasteAction"",
                    ""type"": ""Button"",
                    ""id"": ""c67f6647-2bbf-43a2-800d-dc544e2d5ada"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d74882cf-cbfa-489c-81cf-3a886d6991da"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CutPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebb83a92-a4d7-417e-bff2-fe6c127269dd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""CutPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca262e6d-bed5-4831-9847-9df849ea0e91"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CutPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CutPasteV2"",
            ""id"": ""ec6d81bf-4baa-4509-9b16-2261bef4a38d"",
            ""actions"": [
                {
                    ""name"": ""UpAction"",
                    ""type"": ""Button"",
                    ""id"": ""0ca64dc5-d469-45c2-8ef4-5bf8e7bd641b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownAction"",
                    ""type"": ""Button"",
                    ""id"": ""a3ac9355-4379-4685-880b-7fee7d0839a6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightAction"",
                    ""type"": ""Button"",
                    ""id"": ""20540c03-37e6-4e6a-b808-737bc15898ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftAction"",
                    ""type"": ""Button"",
                    ""id"": ""7bf61f55-277d-4f4a-ad47-e3d8ae982819"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1cd9eee8-defd-4ea3-b410-16fe183b8d86"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0d6b986-4b81-4543-b7ec-44def5b72aad"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""UpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b71f67b-2858-4b0f-a7e7-fa986f7fe515"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""DownAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b1861a6-e422-4a95-8fed-9c84b47f8b9b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""DownAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8573e09-8e79-48b1-af2a-38621ed05cb0"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a3ff4f4-a361-4bd7-9646-c881a78ac880"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RightAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""969f3827-5010-4304-8ee1-1bd31bac6b92"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e97fc0e3-48d5-49e7-b51b-abf75c34df5b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""LeftAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        m_Player_AllowCameraMovement = m_Player.FindAction("AllowCameraMovement", throwIfNotFound: true);
        // Pause
        m_Pause = asset.FindActionMap("Pause", throwIfNotFound: true);
        m_Pause_Unpause = m_Pause.FindAction("Unpause", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_Quit = m_Building.FindAction("Quit", throwIfNotFound: true);
        m_Building_Select = m_Building.FindAction("Select", throwIfNotFound: true);
        m_Building_Move = m_Building.FindAction("Move", throwIfNotFound: true);
        m_Building_Rotate = m_Building.FindAction("Rotate", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Quit = m_UI.FindAction("Quit", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        m_UI_AnyKeyPressed = m_UI.FindAction("AnyKeyPressed", throwIfNotFound: true);
        // SpreadPaste
        m_SpreadPaste = asset.FindActionMap("SpreadPaste", throwIfNotFound: true);
        m_SpreadPaste_SpreadPasteAction = m_SpreadPaste.FindAction("SpreadPasteAction", throwIfNotFound: true);
        // SpreadPasteV2
        m_SpreadPasteV2 = asset.FindActionMap("SpreadPasteV2", throwIfNotFound: true);
        m_SpreadPasteV2_SpreadPasteFirstAction = m_SpreadPasteV2.FindAction("SpreadPasteFirstAction", throwIfNotFound: true);
        m_SpreadPasteV2_SpreadPasteSecondAction = m_SpreadPasteV2.FindAction("SpreadPasteSecondAction", throwIfNotFound: true);
        // BurnTop
        m_BurnTop = asset.FindActionMap("BurnTop", throwIfNotFound: true);
        m_BurnTop_BurnTopAction = m_BurnTop.FindAction("BurnTopAction", throwIfNotFound: true);
        // RollPaste
        m_RollPaste = asset.FindActionMap("RollPaste", throwIfNotFound: true);
        m_RollPaste_RollPasteAction = m_RollPaste.FindAction("RollPasteAction", throwIfNotFound: true);
        // AddItems
        m_AddItems = asset.FindActionMap("AddItems", throwIfNotFound: true);
        m_AddItems_AddItemsAction = m_AddItems.FindAction("AddItemsAction", throwIfNotFound: true);
        // CutPaste
        m_CutPaste = asset.FindActionMap("CutPaste", throwIfNotFound: true);
        m_CutPaste_CutPasteAction = m_CutPaste.FindAction("CutPasteAction", throwIfNotFound: true);
        // CutPasteV2
        m_CutPasteV2 = asset.FindActionMap("CutPasteV2", throwIfNotFound: true);
        m_CutPasteV2_UpAction = m_CutPasteV2.FindAction("UpAction", throwIfNotFound: true);
        m_CutPasteV2_DownAction = m_CutPasteV2.FindAction("DownAction", throwIfNotFound: true);
        m_CutPasteV2_RightAction = m_CutPasteV2.FindAction("RightAction", throwIfNotFound: true);
        m_CutPasteV2_LeftAction = m_CutPasteV2.FindAction("LeftAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Pause;
    private readonly InputAction m_Player_AllowCameraMovement;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputAction @AllowCameraMovement => m_Wrapper.m_Player_AllowCameraMovement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @AllowCameraMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAllowCameraMovement;
                @AllowCameraMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAllowCameraMovement;
                @AllowCameraMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAllowCameraMovement;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @AllowCameraMovement.started += instance.OnAllowCameraMovement;
                @AllowCameraMovement.performed += instance.OnAllowCameraMovement;
                @AllowCameraMovement.canceled += instance.OnAllowCameraMovement;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Pause
    private readonly InputActionMap m_Pause;
    private IPauseActions m_PauseActionsCallbackInterface;
    private readonly InputAction m_Pause_Unpause;
    public struct PauseActions
    {
        private @PlayerInput m_Wrapper;
        public PauseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Unpause => m_Wrapper.m_Pause_Unpause;
        public InputActionMap Get() { return m_Wrapper.m_Pause; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseActions set) { return set.Get(); }
        public void SetCallbacks(IPauseActions instance)
        {
            if (m_Wrapper.m_PauseActionsCallbackInterface != null)
            {
                @Unpause.started -= m_Wrapper.m_PauseActionsCallbackInterface.OnUnpause;
                @Unpause.performed -= m_Wrapper.m_PauseActionsCallbackInterface.OnUnpause;
                @Unpause.canceled -= m_Wrapper.m_PauseActionsCallbackInterface.OnUnpause;
            }
            m_Wrapper.m_PauseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Unpause.started += instance.OnUnpause;
                @Unpause.performed += instance.OnUnpause;
                @Unpause.canceled += instance.OnUnpause;
            }
        }
    }
    public PauseActions @Pause => new PauseActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_Quit;
    private readonly InputAction m_Building_Select;
    private readonly InputAction m_Building_Move;
    private readonly InputAction m_Building_Rotate;
    public struct BuildingActions
    {
        private @PlayerInput m_Wrapper;
        public BuildingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_Building_Quit;
        public InputAction @Select => m_Wrapper.m_Building_Select;
        public InputAction @Move => m_Wrapper.m_Building_Move;
        public InputAction @Rotate => m_Wrapper.m_Building_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Select.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Move.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnMove;
                @Rotate.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Quit;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Point;
    private readonly InputAction m_UI_AnyKeyPressed;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_UI_Quit;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputAction @AnyKeyPressed => m_Wrapper.m_UI_AnyKeyPressed;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @AnyKeyPressed.started -= m_Wrapper.m_UIActionsCallbackInterface.OnAnyKeyPressed;
                @AnyKeyPressed.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnAnyKeyPressed;
                @AnyKeyPressed.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnAnyKeyPressed;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
                @AnyKeyPressed.started += instance.OnAnyKeyPressed;
                @AnyKeyPressed.performed += instance.OnAnyKeyPressed;
                @AnyKeyPressed.canceled += instance.OnAnyKeyPressed;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // SpreadPaste
    private readonly InputActionMap m_SpreadPaste;
    private ISpreadPasteActions m_SpreadPasteActionsCallbackInterface;
    private readonly InputAction m_SpreadPaste_SpreadPasteAction;
    public struct SpreadPasteActions
    {
        private @PlayerInput m_Wrapper;
        public SpreadPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpreadPasteAction => m_Wrapper.m_SpreadPaste_SpreadPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_SpreadPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpreadPasteActions set) { return set.Get(); }
        public void SetCallbacks(ISpreadPasteActions instance)
        {
            if (m_Wrapper.m_SpreadPasteActionsCallbackInterface != null)
            {
                @SpreadPasteAction.started -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
                @SpreadPasteAction.performed -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
                @SpreadPasteAction.canceled -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
            }
            m_Wrapper.m_SpreadPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpreadPasteAction.started += instance.OnSpreadPasteAction;
                @SpreadPasteAction.performed += instance.OnSpreadPasteAction;
                @SpreadPasteAction.canceled += instance.OnSpreadPasteAction;
            }
        }
    }
    public SpreadPasteActions @SpreadPaste => new SpreadPasteActions(this);

    // SpreadPasteV2
    private readonly InputActionMap m_SpreadPasteV2;
    private ISpreadPasteV2Actions m_SpreadPasteV2ActionsCallbackInterface;
    private readonly InputAction m_SpreadPasteV2_SpreadPasteFirstAction;
    private readonly InputAction m_SpreadPasteV2_SpreadPasteSecondAction;
    public struct SpreadPasteV2Actions
    {
        private @PlayerInput m_Wrapper;
        public SpreadPasteV2Actions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpreadPasteFirstAction => m_Wrapper.m_SpreadPasteV2_SpreadPasteFirstAction;
        public InputAction @SpreadPasteSecondAction => m_Wrapper.m_SpreadPasteV2_SpreadPasteSecondAction;
        public InputActionMap Get() { return m_Wrapper.m_SpreadPasteV2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpreadPasteV2Actions set) { return set.Get(); }
        public void SetCallbacks(ISpreadPasteV2Actions instance)
        {
            if (m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface != null)
            {
                @SpreadPasteFirstAction.started -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteFirstAction;
                @SpreadPasteFirstAction.performed -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteFirstAction;
                @SpreadPasteFirstAction.canceled -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteFirstAction;
                @SpreadPasteSecondAction.started -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteSecondAction;
                @SpreadPasteSecondAction.performed -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteSecondAction;
                @SpreadPasteSecondAction.canceled -= m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface.OnSpreadPasteSecondAction;
            }
            m_Wrapper.m_SpreadPasteV2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpreadPasteFirstAction.started += instance.OnSpreadPasteFirstAction;
                @SpreadPasteFirstAction.performed += instance.OnSpreadPasteFirstAction;
                @SpreadPasteFirstAction.canceled += instance.OnSpreadPasteFirstAction;
                @SpreadPasteSecondAction.started += instance.OnSpreadPasteSecondAction;
                @SpreadPasteSecondAction.performed += instance.OnSpreadPasteSecondAction;
                @SpreadPasteSecondAction.canceled += instance.OnSpreadPasteSecondAction;
            }
        }
    }
    public SpreadPasteV2Actions @SpreadPasteV2 => new SpreadPasteV2Actions(this);

    // BurnTop
    private readonly InputActionMap m_BurnTop;
    private IBurnTopActions m_BurnTopActionsCallbackInterface;
    private readonly InputAction m_BurnTop_BurnTopAction;
    public struct BurnTopActions
    {
        private @PlayerInput m_Wrapper;
        public BurnTopActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @BurnTopAction => m_Wrapper.m_BurnTop_BurnTopAction;
        public InputActionMap Get() { return m_Wrapper.m_BurnTop; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BurnTopActions set) { return set.Get(); }
        public void SetCallbacks(IBurnTopActions instance)
        {
            if (m_Wrapper.m_BurnTopActionsCallbackInterface != null)
            {
                @BurnTopAction.started -= m_Wrapper.m_BurnTopActionsCallbackInterface.OnBurnTopAction;
                @BurnTopAction.performed -= m_Wrapper.m_BurnTopActionsCallbackInterface.OnBurnTopAction;
                @BurnTopAction.canceled -= m_Wrapper.m_BurnTopActionsCallbackInterface.OnBurnTopAction;
            }
            m_Wrapper.m_BurnTopActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BurnTopAction.started += instance.OnBurnTopAction;
                @BurnTopAction.performed += instance.OnBurnTopAction;
                @BurnTopAction.canceled += instance.OnBurnTopAction;
            }
        }
    }
    public BurnTopActions @BurnTop => new BurnTopActions(this);

    // RollPaste
    private readonly InputActionMap m_RollPaste;
    private IRollPasteActions m_RollPasteActionsCallbackInterface;
    private readonly InputAction m_RollPaste_RollPasteAction;
    public struct RollPasteActions
    {
        private @PlayerInput m_Wrapper;
        public RollPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RollPasteAction => m_Wrapper.m_RollPaste_RollPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_RollPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RollPasteActions set) { return set.Get(); }
        public void SetCallbacks(IRollPasteActions instance)
        {
            if (m_Wrapper.m_RollPasteActionsCallbackInterface != null)
            {
                @RollPasteAction.started -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
                @RollPasteAction.performed -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
                @RollPasteAction.canceled -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
            }
            m_Wrapper.m_RollPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RollPasteAction.started += instance.OnRollPasteAction;
                @RollPasteAction.performed += instance.OnRollPasteAction;
                @RollPasteAction.canceled += instance.OnRollPasteAction;
            }
        }
    }
    public RollPasteActions @RollPaste => new RollPasteActions(this);

    // AddItems
    private readonly InputActionMap m_AddItems;
    private IAddItemsActions m_AddItemsActionsCallbackInterface;
    private readonly InputAction m_AddItems_AddItemsAction;
    public struct AddItemsActions
    {
        private @PlayerInput m_Wrapper;
        public AddItemsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddItemsAction => m_Wrapper.m_AddItems_AddItemsAction;
        public InputActionMap Get() { return m_Wrapper.m_AddItems; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AddItemsActions set) { return set.Get(); }
        public void SetCallbacks(IAddItemsActions instance)
        {
            if (m_Wrapper.m_AddItemsActionsCallbackInterface != null)
            {
                @AddItemsAction.started -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
                @AddItemsAction.performed -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
                @AddItemsAction.canceled -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
            }
            m_Wrapper.m_AddItemsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddItemsAction.started += instance.OnAddItemsAction;
                @AddItemsAction.performed += instance.OnAddItemsAction;
                @AddItemsAction.canceled += instance.OnAddItemsAction;
            }
        }
    }
    public AddItemsActions @AddItems => new AddItemsActions(this);

    // CutPaste
    private readonly InputActionMap m_CutPaste;
    private ICutPasteActions m_CutPasteActionsCallbackInterface;
    private readonly InputAction m_CutPaste_CutPasteAction;
    public struct CutPasteActions
    {
        private @PlayerInput m_Wrapper;
        public CutPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CutPasteAction => m_Wrapper.m_CutPaste_CutPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_CutPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutPasteActions set) { return set.Get(); }
        public void SetCallbacks(ICutPasteActions instance)
        {
            if (m_Wrapper.m_CutPasteActionsCallbackInterface != null)
            {
                @CutPasteAction.started -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
                @CutPasteAction.performed -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
                @CutPasteAction.canceled -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
            }
            m_Wrapper.m_CutPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CutPasteAction.started += instance.OnCutPasteAction;
                @CutPasteAction.performed += instance.OnCutPasteAction;
                @CutPasteAction.canceled += instance.OnCutPasteAction;
            }
        }
    }
    public CutPasteActions @CutPaste => new CutPasteActions(this);

    // CutPasteV2
    private readonly InputActionMap m_CutPasteV2;
    private ICutPasteV2Actions m_CutPasteV2ActionsCallbackInterface;
    private readonly InputAction m_CutPasteV2_UpAction;
    private readonly InputAction m_CutPasteV2_DownAction;
    private readonly InputAction m_CutPasteV2_RightAction;
    private readonly InputAction m_CutPasteV2_LeftAction;
    public struct CutPasteV2Actions
    {
        private @PlayerInput m_Wrapper;
        public CutPasteV2Actions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpAction => m_Wrapper.m_CutPasteV2_UpAction;
        public InputAction @DownAction => m_Wrapper.m_CutPasteV2_DownAction;
        public InputAction @RightAction => m_Wrapper.m_CutPasteV2_RightAction;
        public InputAction @LeftAction => m_Wrapper.m_CutPasteV2_LeftAction;
        public InputActionMap Get() { return m_Wrapper.m_CutPasteV2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutPasteV2Actions set) { return set.Get(); }
        public void SetCallbacks(ICutPasteV2Actions instance)
        {
            if (m_Wrapper.m_CutPasteV2ActionsCallbackInterface != null)
            {
                @UpAction.started -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnUpAction;
                @UpAction.performed -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnUpAction;
                @UpAction.canceled -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnUpAction;
                @DownAction.started -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnDownAction;
                @DownAction.performed -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnDownAction;
                @DownAction.canceled -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnDownAction;
                @RightAction.started -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnRightAction;
                @RightAction.performed -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnRightAction;
                @RightAction.canceled -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnRightAction;
                @LeftAction.started -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnLeftAction;
                @LeftAction.performed -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnLeftAction;
                @LeftAction.canceled -= m_Wrapper.m_CutPasteV2ActionsCallbackInterface.OnLeftAction;
            }
            m_Wrapper.m_CutPasteV2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UpAction.started += instance.OnUpAction;
                @UpAction.performed += instance.OnUpAction;
                @UpAction.canceled += instance.OnUpAction;
                @DownAction.started += instance.OnDownAction;
                @DownAction.performed += instance.OnDownAction;
                @DownAction.canceled += instance.OnDownAction;
                @RightAction.started += instance.OnRightAction;
                @RightAction.performed += instance.OnRightAction;
                @RightAction.canceled += instance.OnRightAction;
                @LeftAction.started += instance.OnLeftAction;
                @LeftAction.performed += instance.OnLeftAction;
                @LeftAction.canceled += instance.OnLeftAction;
            }
        }
    }
    public CutPasteV2Actions @CutPasteV2 => new CutPasteV2Actions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnAllowCameraMovement(InputAction.CallbackContext context);
    }
    public interface IPauseActions
    {
        void OnUnpause(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnAnyKeyPressed(InputAction.CallbackContext context);
    }
    public interface ISpreadPasteActions
    {
        void OnSpreadPasteAction(InputAction.CallbackContext context);
    }
    public interface ISpreadPasteV2Actions
    {
        void OnSpreadPasteFirstAction(InputAction.CallbackContext context);
        void OnSpreadPasteSecondAction(InputAction.CallbackContext context);
    }
    public interface IBurnTopActions
    {
        void OnBurnTopAction(InputAction.CallbackContext context);
    }
    public interface IRollPasteActions
    {
        void OnRollPasteAction(InputAction.CallbackContext context);
    }
    public interface IAddItemsActions
    {
        void OnAddItemsAction(InputAction.CallbackContext context);
    }
    public interface ICutPasteActions
    {
        void OnCutPasteAction(InputAction.CallbackContext context);
    }
    public interface ICutPasteV2Actions
    {
        void OnUpAction(InputAction.CallbackContext context);
        void OnDownAction(InputAction.CallbackContext context);
        void OnRightAction(InputAction.CallbackContext context);
        void OnLeftAction(InputAction.CallbackContext context);
    }
}
