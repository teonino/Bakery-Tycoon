//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3fa592be-eaea-4494-9b3f-be1cbbbc0977"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c6667191-1a8f-4c53-a628-ec234232cf2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5359760c-5e78-451f-8d17-2f9ca621cd81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a114bd0e-247e-45b2-b638-fa752fb40b8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6bd2746a-2c76-4394-b4d3-924e83c10eca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4bb6b74b-347b-4128-99e9-be8f9124e2dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""63e7bf3e-4510-4188-b037-99f50498c68f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""219b9d6f-d681-4800-95b3-add5eef06254"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dc69ffc8-a657-406a-8e06-3a23acb99cca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""D-Pad"",
                    ""id"": ""7dfb4f3a-1019-4c8b-9a93-ddc869bf08e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""54beb43f-d3c9-43d1-8f45-332888248a9f"",
                    ""path"": ""<XInputController>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a9d9e432-e438-446d-bf44-0dcea52c6383"",
                    ""path"": ""<XInputController>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b3cc2781-dcfe-422b-ac61-965290b7e854"",
                    ""path"": ""<XInputController>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2f604800-6da5-40f7-84a4-cddd409c7bb7"",
                    ""path"": ""<XInputController>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c32a7f67-5144-4d40-836d-d2571518803f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69b24343-039d-48e5-88e3-d98e0f3513e0"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""6ad8660a-8a33-4654-8768-79f81f54fef0"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""0fd5dead-5c97-4c9a-8f24-fa0dd33c2726"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""545e6474-0a19-4ac5-8872-205174cf5ae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e5ad963-e47a-4531-9862-72d0d36f62a0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""815bbc43-8366-432e-8dbd-eabfb08ec537"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d74113b5-f6be-46fc-a77a-0454f9d97d43"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ab2823d9-8049-479f-8932-8a8413c95784"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""1553c491-aa6d-41e7-8596-6d42e2fbbc4a"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""7dee7be6-6520-40b5-a9d7-60cfda8b4838"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""9e47fee7-ef76-4eca-a8c2-f6b5b8760fa6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""bfc9a33f-56f6-4ca8-a4c6-3f9b65eb81b0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5030b964-b365-4a60-94b0-546e26b45acd"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""87b1d1b7-7d62-46fa-928f-842cd938131a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6dc1cca-2d87-48a5-aca3-32870cc30923"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b57a4665-499a-4c4f-bde4-3acdc3250d50"",
                    ""path"": ""<XInputController>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59851724-5934-4c91-a37d-8cc734a3b943"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpreadPaste"",
            ""id"": ""4b057310-33a5-479a-98cf-ffc34e8b1b5f"",
            ""actions"": [
                {
                    ""name"": ""SpreadPasteAction"",
                    ""type"": ""Value"",
                    ""id"": ""df5fed86-1788-4a65-abda-556772ae2f65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""46069e79-8268-4697-8bae-ac7e63c49d6d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""SpreadPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65a74147-41bb-4dd5-b441-9d9061ca9704"",
                    ""path"": ""<XInputController>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SpreadPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CutPaste"",
            ""id"": ""206dee9d-8672-4f18-98b1-d21df08131a6"",
            ""actions"": [
                {
                    ""name"": ""CutPasteAction"",
                    ""type"": ""Value"",
                    ""id"": ""ecdbdbb1-94b9-4a44-8f49-c573e3c26488"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""af292c55-c221-49e6-a1b0-af4a4371f0da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""CutPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""322d8a94-0fec-406c-8bf0-dc4db42599e8"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""CutPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AddButter"",
            ""id"": ""75f8803a-f11e-4113-8e58-c0b506996d96"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""c1c76733-3779-44ef-88ec-108205649a87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Z"",
                    ""type"": ""Button"",
                    ""id"": ""e346326e-e43e-445a-b698-6573522ec9f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E"",
                    ""type"": ""Button"",
                    ""id"": ""36a0dfff-e46e-4194-96c2-8c9aeeff4ee4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Q"",
                    ""type"": ""Button"",
                    ""id"": ""34a117f1-76d1-431a-ac7b-d6f67e691f4c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""S"",
                    ""type"": ""Button"",
                    ""id"": ""cb4872ba-2975-4470-923b-4b089390adcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D"",
                    ""type"": ""Button"",
                    ""id"": ""9e196e4b-253a-45db-b802-df17d65d8551"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""W"",
                    ""type"": ""Button"",
                    ""id"": ""efc6f2e3-f8dd-4965-8915-22960c9f6e27"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""2dd8dd0b-d8e3-4e46-8f53-8bba167284ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C"",
                    ""type"": ""Button"",
                    ""id"": ""b71f2340-2917-420f-abfb-215564df6822"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f94d745-c778-4efa-9d9e-58b9b1351555"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f437f502-7257-4620-81f8-b224e69211b5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Z"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d98bbd0-0f45-412d-8774-baffb29cf750"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8e7f03d2-08d1-4003-9f2e-af2e49929441"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Q"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4722daa3-13c1-4b11-8c2e-4cc4f71db443"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""S"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e66e5afb-6de1-4ebe-be50-fc2e5cf05000"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0abd575e-468c-4ba4-8f21-695d6a78a077"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""W"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7242c56-b7a3-4b01-b762-7ec4ad12fc78"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""19433088-02ff-4b7b-82c3-943e8300daad"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AddSeeds"",
            ""id"": ""62cbf4d2-01e9-40f1-a409-b07a38225eab"",
            ""actions"": [
                {
                    ""name"": ""AddSeed"",
                    ""type"": ""Button"",
                    ""id"": ""d09ae8d0-915a-40c4-b579-6e6450f3b016"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa9204d6-87b8-4297-a107-e42c44ca2cdf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddSeed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RollPaste"",
            ""id"": ""2a77045c-e556-4930-9476-39a991673936"",
            ""actions"": [
                {
                    ""name"": ""RollPasteAction"",
                    ""type"": ""Value"",
                    ""id"": ""1dac96ba-9f53-4391-a674-5a15567ba27e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Joystick"",
                    ""id"": ""bd012439-0e46-4e75-85bc-8de0967371a5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""00aeeed8-cc4f-4028-9ff7-4a761d4c3fe2"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ebac584-eaf4-4666-b8b9-fc74fec939e6"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""43883835-be7a-4f82-8bda-44700f9ed4e9"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""52ba4b39-b992-4ba3-9b56-902221eacdbe"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftRightAction"",
                    ""id"": ""97288f26-074f-4aa5-8648-62c3aa5a7038"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b4b675df-e767-4410-a366-d22f2d32b565"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""efc4f3e5-55e3-4ef8-a3e8-cdca0035876a"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""64bc01f5-9afc-48b8-94c6-13b294de7af7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3894c0f2-1962-40c6-9e3c-a29dff58b805"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RollPasteAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""AddItems"",
            ""id"": ""9fd56c07-fbba-4744-8c34-1eb08047e60b"",
            ""actions"": [
                {
                    ""name"": ""AddItemsAction"",
                    ""type"": ""Button"",
                    ""id"": ""9e5da248-9d5e-4120-95df-c781a37b188a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e717c75d-fb18-48b1-adf0-35f43b5f4e74"",
                    ""path"": ""<XInputController>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""AddItemsAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53815827-1d00-471e-a47a-8d960c3d911a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""AddItemsAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<XInputController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_Quit = m_Building.FindAction("Quit", throwIfNotFound: true);
        m_Building_Select = m_Building.FindAction("Select", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Quit = m_UI.FindAction("Quit", throwIfNotFound: true);
        m_UI_Click = m_UI.FindAction("Click", throwIfNotFound: true);
        m_UI_Point = m_UI.FindAction("Point", throwIfNotFound: true);
        // SpreadPaste
        m_SpreadPaste = asset.FindActionMap("SpreadPaste", throwIfNotFound: true);
        m_SpreadPaste_SpreadPasteAction = m_SpreadPaste.FindAction("SpreadPasteAction", throwIfNotFound: true);
        // CutPaste
        m_CutPaste = asset.FindActionMap("CutPaste", throwIfNotFound: true);
        m_CutPaste_CutPasteAction = m_CutPaste.FindAction("CutPasteAction", throwIfNotFound: true);
        // AddButter
        m_AddButter = asset.FindActionMap("AddButter", throwIfNotFound: true);
        m_AddButter_A = m_AddButter.FindAction("A", throwIfNotFound: true);
        m_AddButter_Z = m_AddButter.FindAction("Z", throwIfNotFound: true);
        m_AddButter_E = m_AddButter.FindAction("E", throwIfNotFound: true);
        m_AddButter_Q = m_AddButter.FindAction("Q", throwIfNotFound: true);
        m_AddButter_S = m_AddButter.FindAction("S", throwIfNotFound: true);
        m_AddButter_D = m_AddButter.FindAction("D", throwIfNotFound: true);
        m_AddButter_W = m_AddButter.FindAction("W", throwIfNotFound: true);
        m_AddButter_X = m_AddButter.FindAction("X", throwIfNotFound: true);
        m_AddButter_C = m_AddButter.FindAction("C", throwIfNotFound: true);
        // AddSeeds
        m_AddSeeds = asset.FindActionMap("AddSeeds", throwIfNotFound: true);
        m_AddSeeds_AddSeed = m_AddSeeds.FindAction("AddSeed", throwIfNotFound: true);
        // RollPaste
        m_RollPaste = asset.FindActionMap("RollPaste", throwIfNotFound: true);
        m_RollPaste_RollPasteAction = m_RollPaste.FindAction("RollPasteAction", throwIfNotFound: true);
        // AddItems
        m_AddItems = asset.FindActionMap("AddItems", throwIfNotFound: true);
        m_AddItems_AddItemsAction = m_AddItems.FindAction("AddItemsAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Interact;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_Quit;
    private readonly InputAction m_Building_Select;
    public struct BuildingActions
    {
        private @PlayerInput m_Wrapper;
        public BuildingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_Building_Quit;
        public InputAction @Select => m_Wrapper.m_Building_Select;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Select.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Quit;
    private readonly InputAction m_UI_Click;
    private readonly InputAction m_UI_Point;
    public struct UIActions
    {
        private @PlayerInput m_Wrapper;
        public UIActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_UI_Quit;
        public InputAction @Click => m_Wrapper.m_UI_Click;
        public InputAction @Point => m_Wrapper.m_UI_Point;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnQuit;
                @Click.started -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnClick;
                @Point.started -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnPoint;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // SpreadPaste
    private readonly InputActionMap m_SpreadPaste;
    private ISpreadPasteActions m_SpreadPasteActionsCallbackInterface;
    private readonly InputAction m_SpreadPaste_SpreadPasteAction;
    public struct SpreadPasteActions
    {
        private @PlayerInput m_Wrapper;
        public SpreadPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SpreadPasteAction => m_Wrapper.m_SpreadPaste_SpreadPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_SpreadPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpreadPasteActions set) { return set.Get(); }
        public void SetCallbacks(ISpreadPasteActions instance)
        {
            if (m_Wrapper.m_SpreadPasteActionsCallbackInterface != null)
            {
                @SpreadPasteAction.started -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
                @SpreadPasteAction.performed -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
                @SpreadPasteAction.canceled -= m_Wrapper.m_SpreadPasteActionsCallbackInterface.OnSpreadPasteAction;
            }
            m_Wrapper.m_SpreadPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SpreadPasteAction.started += instance.OnSpreadPasteAction;
                @SpreadPasteAction.performed += instance.OnSpreadPasteAction;
                @SpreadPasteAction.canceled += instance.OnSpreadPasteAction;
            }
        }
    }
    public SpreadPasteActions @SpreadPaste => new SpreadPasteActions(this);

    // CutPaste
    private readonly InputActionMap m_CutPaste;
    private ICutPasteActions m_CutPasteActionsCallbackInterface;
    private readonly InputAction m_CutPaste_CutPasteAction;
    public struct CutPasteActions
    {
        private @PlayerInput m_Wrapper;
        public CutPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CutPasteAction => m_Wrapper.m_CutPaste_CutPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_CutPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CutPasteActions set) { return set.Get(); }
        public void SetCallbacks(ICutPasteActions instance)
        {
            if (m_Wrapper.m_CutPasteActionsCallbackInterface != null)
            {
                @CutPasteAction.started -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
                @CutPasteAction.performed -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
                @CutPasteAction.canceled -= m_Wrapper.m_CutPasteActionsCallbackInterface.OnCutPasteAction;
            }
            m_Wrapper.m_CutPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CutPasteAction.started += instance.OnCutPasteAction;
                @CutPasteAction.performed += instance.OnCutPasteAction;
                @CutPasteAction.canceled += instance.OnCutPasteAction;
            }
        }
    }
    public CutPasteActions @CutPaste => new CutPasteActions(this);

    // AddButter
    private readonly InputActionMap m_AddButter;
    private IAddButterActions m_AddButterActionsCallbackInterface;
    private readonly InputAction m_AddButter_A;
    private readonly InputAction m_AddButter_Z;
    private readonly InputAction m_AddButter_E;
    private readonly InputAction m_AddButter_Q;
    private readonly InputAction m_AddButter_S;
    private readonly InputAction m_AddButter_D;
    private readonly InputAction m_AddButter_W;
    private readonly InputAction m_AddButter_X;
    private readonly InputAction m_AddButter_C;
    public struct AddButterActions
    {
        private @PlayerInput m_Wrapper;
        public AddButterActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_AddButter_A;
        public InputAction @Z => m_Wrapper.m_AddButter_Z;
        public InputAction @E => m_Wrapper.m_AddButter_E;
        public InputAction @Q => m_Wrapper.m_AddButter_Q;
        public InputAction @S => m_Wrapper.m_AddButter_S;
        public InputAction @D => m_Wrapper.m_AddButter_D;
        public InputAction @W => m_Wrapper.m_AddButter_W;
        public InputAction @X => m_Wrapper.m_AddButter_X;
        public InputAction @C => m_Wrapper.m_AddButter_C;
        public InputActionMap Get() { return m_Wrapper.m_AddButter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AddButterActions set) { return set.Get(); }
        public void SetCallbacks(IAddButterActions instance)
        {
            if (m_Wrapper.m_AddButterActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnA;
                @Z.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnZ;
                @Z.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnZ;
                @Z.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnZ;
                @E.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnE;
                @E.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnE;
                @E.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnE;
                @Q.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnQ;
                @Q.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnQ;
                @Q.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnQ;
                @S.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnS;
                @S.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnS;
                @S.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnS;
                @D.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnD;
                @D.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnD;
                @D.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnD;
                @W.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnW;
                @W.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnW;
                @W.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnW;
                @X.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnX;
                @X.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnX;
                @X.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnX;
                @C.started -= m_Wrapper.m_AddButterActionsCallbackInterface.OnC;
                @C.performed -= m_Wrapper.m_AddButterActionsCallbackInterface.OnC;
                @C.canceled -= m_Wrapper.m_AddButterActionsCallbackInterface.OnC;
            }
            m_Wrapper.m_AddButterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @Z.started += instance.OnZ;
                @Z.performed += instance.OnZ;
                @Z.canceled += instance.OnZ;
                @E.started += instance.OnE;
                @E.performed += instance.OnE;
                @E.canceled += instance.OnE;
                @Q.started += instance.OnQ;
                @Q.performed += instance.OnQ;
                @Q.canceled += instance.OnQ;
                @S.started += instance.OnS;
                @S.performed += instance.OnS;
                @S.canceled += instance.OnS;
                @D.started += instance.OnD;
                @D.performed += instance.OnD;
                @D.canceled += instance.OnD;
                @W.started += instance.OnW;
                @W.performed += instance.OnW;
                @W.canceled += instance.OnW;
                @X.started += instance.OnX;
                @X.performed += instance.OnX;
                @X.canceled += instance.OnX;
                @C.started += instance.OnC;
                @C.performed += instance.OnC;
                @C.canceled += instance.OnC;
            }
        }
    }
    public AddButterActions @AddButter => new AddButterActions(this);

    // AddSeeds
    private readonly InputActionMap m_AddSeeds;
    private IAddSeedsActions m_AddSeedsActionsCallbackInterface;
    private readonly InputAction m_AddSeeds_AddSeed;
    public struct AddSeedsActions
    {
        private @PlayerInput m_Wrapper;
        public AddSeedsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddSeed => m_Wrapper.m_AddSeeds_AddSeed;
        public InputActionMap Get() { return m_Wrapper.m_AddSeeds; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AddSeedsActions set) { return set.Get(); }
        public void SetCallbacks(IAddSeedsActions instance)
        {
            if (m_Wrapper.m_AddSeedsActionsCallbackInterface != null)
            {
                @AddSeed.started -= m_Wrapper.m_AddSeedsActionsCallbackInterface.OnAddSeed;
                @AddSeed.performed -= m_Wrapper.m_AddSeedsActionsCallbackInterface.OnAddSeed;
                @AddSeed.canceled -= m_Wrapper.m_AddSeedsActionsCallbackInterface.OnAddSeed;
            }
            m_Wrapper.m_AddSeedsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddSeed.started += instance.OnAddSeed;
                @AddSeed.performed += instance.OnAddSeed;
                @AddSeed.canceled += instance.OnAddSeed;
            }
        }
    }
    public AddSeedsActions @AddSeeds => new AddSeedsActions(this);

    // RollPaste
    private readonly InputActionMap m_RollPaste;
    private IRollPasteActions m_RollPasteActionsCallbackInterface;
    private readonly InputAction m_RollPaste_RollPasteAction;
    public struct RollPasteActions
    {
        private @PlayerInput m_Wrapper;
        public RollPasteActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @RollPasteAction => m_Wrapper.m_RollPaste_RollPasteAction;
        public InputActionMap Get() { return m_Wrapper.m_RollPaste; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RollPasteActions set) { return set.Get(); }
        public void SetCallbacks(IRollPasteActions instance)
        {
            if (m_Wrapper.m_RollPasteActionsCallbackInterface != null)
            {
                @RollPasteAction.started -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
                @RollPasteAction.performed -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
                @RollPasteAction.canceled -= m_Wrapper.m_RollPasteActionsCallbackInterface.OnRollPasteAction;
            }
            m_Wrapper.m_RollPasteActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RollPasteAction.started += instance.OnRollPasteAction;
                @RollPasteAction.performed += instance.OnRollPasteAction;
                @RollPasteAction.canceled += instance.OnRollPasteAction;
            }
        }
    }
    public RollPasteActions @RollPaste => new RollPasteActions(this);

    // AddItems
    private readonly InputActionMap m_AddItems;
    private IAddItemsActions m_AddItemsActionsCallbackInterface;
    private readonly InputAction m_AddItems_AddItemsAction;
    public struct AddItemsActions
    {
        private @PlayerInput m_Wrapper;
        public AddItemsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddItemsAction => m_Wrapper.m_AddItems_AddItemsAction;
        public InputActionMap Get() { return m_Wrapper.m_AddItems; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AddItemsActions set) { return set.Get(); }
        public void SetCallbacks(IAddItemsActions instance)
        {
            if (m_Wrapper.m_AddItemsActionsCallbackInterface != null)
            {
                @AddItemsAction.started -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
                @AddItemsAction.performed -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
                @AddItemsAction.canceled -= m_Wrapper.m_AddItemsActionsCallbackInterface.OnAddItemsAction;
            }
            m_Wrapper.m_AddItemsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddItemsAction.started += instance.OnAddItemsAction;
                @AddItemsAction.performed += instance.OnAddItemsAction;
                @AddItemsAction.canceled += instance.OnAddItemsAction;
            }
        }
    }
    public AddItemsActions @AddItems => new AddItemsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
    }
    public interface ISpreadPasteActions
    {
        void OnSpreadPasteAction(InputAction.CallbackContext context);
    }
    public interface ICutPasteActions
    {
        void OnCutPasteAction(InputAction.CallbackContext context);
    }
    public interface IAddButterActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnZ(InputAction.CallbackContext context);
        void OnE(InputAction.CallbackContext context);
        void OnQ(InputAction.CallbackContext context);
        void OnS(InputAction.CallbackContext context);
        void OnD(InputAction.CallbackContext context);
        void OnW(InputAction.CallbackContext context);
        void OnX(InputAction.CallbackContext context);
        void OnC(InputAction.CallbackContext context);
    }
    public interface IAddSeedsActions
    {
        void OnAddSeed(InputAction.CallbackContext context);
    }
    public interface IRollPasteActions
    {
        void OnRollPasteAction(InputAction.CallbackContext context);
    }
    public interface IAddItemsActions
    {
        void OnAddItemsAction(InputAction.CallbackContext context);
    }
}
