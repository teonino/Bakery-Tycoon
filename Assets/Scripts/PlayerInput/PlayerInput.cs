//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerInput/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""3fa592be-eaea-4494-9b3f-be1cbbbc0977"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c6667191-1a8f-4c53-a628-ec234232cf2b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""5359760c-5e78-451f-8d17-2f9ca621cd81"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a114bd0e-247e-45b2-b638-fa752fb40b8c"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""6bd2746a-2c76-4394-b4d3-924e83c10eca"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4bb6b74b-347b-4128-99e9-be8f9124e2dd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""63e7bf3e-4510-4188-b037-99f50498c68f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""219b9d6f-d681-4800-95b3-add5eef06254"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""dc69ffc8-a657-406a-8e06-3a23acb99cca"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c32a7f67-5144-4d40-836d-d2571518803f"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TestMinigame"",
            ""id"": ""bc3162d7-1ddb-477b-8025-3ae526dd7471"",
            ""actions"": [
                {
                    ""name"": ""TestAction"",
                    ""type"": ""Button"",
                    ""id"": ""8d600910-070c-4482-8832-efd96693f2da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b084a525-e6e5-4478-b195-d947969a53e2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""TestMinigame2"",
            ""id"": ""af6cf9d8-6a65-4ff8-8db0-51d8b9e423fb"",
            ""actions"": [
                {
                    ""name"": ""TestAction"",
                    ""type"": ""Button"",
                    ""id"": ""b86569cd-d0ed-4026-8790-9a085c3f3dca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b720b13c-396f-4d6e-93cb-41f46933440f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Workplace"",
            ""id"": ""a719ec9b-28f2-4858-bc3a-ea28bf73b662"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""d991274b-b0c7-4201-8994-9cfedd663cc4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e28eed6-0291-4d76-a956-f586600ab01b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Building"",
            ""id"": ""6ad8660a-8a33-4654-8768-79f81f54fef0"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""0fd5dead-5c97-4c9a-8f24-fa0dd33c2726"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""545e6474-0a19-4ac5-8872-205174cf5ae4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e5ad963-e47a-4531-9862-72d0d36f62a0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d74113b5-f6be-46fc-a77a-0454f9d97d43"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        // TestMinigame
        m_TestMinigame = asset.FindActionMap("TestMinigame", throwIfNotFound: true);
        m_TestMinigame_TestAction = m_TestMinigame.FindAction("TestAction", throwIfNotFound: true);
        // TestMinigame2
        m_TestMinigame2 = asset.FindActionMap("TestMinigame2", throwIfNotFound: true);
        m_TestMinigame2_TestAction = m_TestMinigame2.FindAction("TestAction", throwIfNotFound: true);
        // Workplace
        m_Workplace = asset.FindActionMap("Workplace", throwIfNotFound: true);
        m_Workplace_Quit = m_Workplace.FindAction("Quit", throwIfNotFound: true);
        // Building
        m_Building = asset.FindActionMap("Building", throwIfNotFound: true);
        m_Building_Quit = m_Building.FindAction("Quit", throwIfNotFound: true);
        m_Building_Select = m_Building.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Interact;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMove;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // TestMinigame
    private readonly InputActionMap m_TestMinigame;
    private ITestMinigameActions m_TestMinigameActionsCallbackInterface;
    private readonly InputAction m_TestMinigame_TestAction;
    public struct TestMinigameActions
    {
        private @PlayerInput m_Wrapper;
        public TestMinigameActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestAction => m_Wrapper.m_TestMinigame_TestAction;
        public InputActionMap Get() { return m_Wrapper.m_TestMinigame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMinigameActions set) { return set.Get(); }
        public void SetCallbacks(ITestMinigameActions instance)
        {
            if (m_Wrapper.m_TestMinigameActionsCallbackInterface != null)
            {
                @TestAction.started -= m_Wrapper.m_TestMinigameActionsCallbackInterface.OnTestAction;
                @TestAction.performed -= m_Wrapper.m_TestMinigameActionsCallbackInterface.OnTestAction;
                @TestAction.canceled -= m_Wrapper.m_TestMinigameActionsCallbackInterface.OnTestAction;
            }
            m_Wrapper.m_TestMinigameActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TestAction.started += instance.OnTestAction;
                @TestAction.performed += instance.OnTestAction;
                @TestAction.canceled += instance.OnTestAction;
            }
        }
    }
    public TestMinigameActions @TestMinigame => new TestMinigameActions(this);

    // TestMinigame2
    private readonly InputActionMap m_TestMinigame2;
    private ITestMinigame2Actions m_TestMinigame2ActionsCallbackInterface;
    private readonly InputAction m_TestMinigame2_TestAction;
    public struct TestMinigame2Actions
    {
        private @PlayerInput m_Wrapper;
        public TestMinigame2Actions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestAction => m_Wrapper.m_TestMinigame2_TestAction;
        public InputActionMap Get() { return m_Wrapper.m_TestMinigame2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestMinigame2Actions set) { return set.Get(); }
        public void SetCallbacks(ITestMinigame2Actions instance)
        {
            if (m_Wrapper.m_TestMinigame2ActionsCallbackInterface != null)
            {
                @TestAction.started -= m_Wrapper.m_TestMinigame2ActionsCallbackInterface.OnTestAction;
                @TestAction.performed -= m_Wrapper.m_TestMinigame2ActionsCallbackInterface.OnTestAction;
                @TestAction.canceled -= m_Wrapper.m_TestMinigame2ActionsCallbackInterface.OnTestAction;
            }
            m_Wrapper.m_TestMinigame2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TestAction.started += instance.OnTestAction;
                @TestAction.performed += instance.OnTestAction;
                @TestAction.canceled += instance.OnTestAction;
            }
        }
    }
    public TestMinigame2Actions @TestMinigame2 => new TestMinigame2Actions(this);

    // Workplace
    private readonly InputActionMap m_Workplace;
    private IWorkplaceActions m_WorkplaceActionsCallbackInterface;
    private readonly InputAction m_Workplace_Quit;
    public struct WorkplaceActions
    {
        private @PlayerInput m_Wrapper;
        public WorkplaceActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_Workplace_Quit;
        public InputActionMap Get() { return m_Wrapper.m_Workplace; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorkplaceActions set) { return set.Get(); }
        public void SetCallbacks(IWorkplaceActions instance)
        {
            if (m_Wrapper.m_WorkplaceActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_WorkplaceActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_WorkplaceActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_WorkplaceActionsCallbackInterface.OnQuit;
            }
            m_Wrapper.m_WorkplaceActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }
        }
    }
    public WorkplaceActions @Workplace => new WorkplaceActions(this);

    // Building
    private readonly InputActionMap m_Building;
    private IBuildingActions m_BuildingActionsCallbackInterface;
    private readonly InputAction m_Building_Quit;
    private readonly InputAction m_Building_Select;
    public struct BuildingActions
    {
        private @PlayerInput m_Wrapper;
        public BuildingActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_Building_Quit;
        public InputAction @Select => m_Wrapper.m_Building_Select;
        public InputActionMap Get() { return m_Wrapper.m_Building; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingActions instance)
        {
            if (m_Wrapper.m_BuildingActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnQuit;
                @Select.started -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_BuildingActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_BuildingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public BuildingActions @Building => new BuildingActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface ITestMinigameActions
    {
        void OnTestAction(InputAction.CallbackContext context);
    }
    public interface ITestMinigame2Actions
    {
        void OnTestAction(InputAction.CallbackContext context);
    }
    public interface IWorkplaceActions
    {
        void OnQuit(InputAction.CallbackContext context);
    }
    public interface IBuildingActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
